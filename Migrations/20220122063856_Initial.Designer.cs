// <auto-generated />
using System;
using KalosfideAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KalosfideAPI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220122063856_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveCatégorie", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id", "Date");

                    b.HasIndex("Id");

                    b.ToTable("ArchiveCatégories");
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveClient", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("Etat")
                        .HasColumnType("int")
                        .HasMaxLength(1);

                    b.Property<string>("FormatNomFichierCommande")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormatNomFichierFacture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormatNomFichierLivraison")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "Date");

                    b.HasIndex("Id");

                    b.ToTable("ArchiveClient");
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveFournisseur", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("Etat")
                        .HasColumnType("int");

                    b.Property<string>("FormatNomFichierCommande")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormatNomFichierFacture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormatNomFichierLivraison")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Siret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "Date");

                    b.HasIndex("Id");

                    b.ToTable("ArchiveFournisseur");
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveProduit", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CategorieId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int?>("TypeCommande")
                        .HasColumnType("int");

                    b.Property<int?>("TypeMesure")
                        .HasColumnType("int");

                    b.HasKey("Id", "Date");

                    b.HasIndex("Id");

                    b.ToTable("ArchiveProduits");
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveSite", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Ouvert")
                        .HasColumnType("bit");

                    b.Property<string>("Titre")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id", "Date");

                    b.HasIndex("Id");

                    b.ToTable("ArchiveSites");
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveUtilisateur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Etat")
                        .HasColumnType("int");

                    b.Property<long?>("IdDernierSite")
                        .HasColumnType("bigint");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("Id", "Date");

                    b.HasIndex("Id");

                    b.ToTable("ArchiveUtilisateurs");
                });

            modelBuilder.Entity("KalosfideAPI.Data.Catégorie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long>("SiteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("Id", "Nom")
                        .IsUnique();

                    b.ToTable("Catégories");
                });

            modelBuilder.Entity("KalosfideAPI.Data.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("Etat")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long>("SiteId")
                        .HasColumnType("bigint");

                    b.Property<string>("UtilisateurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("KalosfideAPI.Data.DemandeSite", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Envoi")
                        .HasColumnType("datetime2");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("Email");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DemandesSite");
                });

            modelBuilder.Entity("KalosfideAPI.Data.DocCLF", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("No")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Incomplet")
                        .HasColumnType("bit");

                    b.Property<int?>("NbLignes")
                        .HasColumnType("int");

                    b.Property<long?>("NoGroupe")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(7,2)");

                    b.HasKey("Id", "No", "Type");

                    b.ToTable("Docs");
                });

            modelBuilder.Entity("KalosfideAPI.Data.Fournisseur", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("Etat")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Siret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilisateurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Fournisseur");
                });

            modelBuilder.Entity("KalosfideAPI.Data.Invitation", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Email", "Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("Id");

                    b.ToTable("Invitation");
                });

            modelBuilder.Entity("KalosfideAPI.Data.LigneCLF", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("No")
                        .HasColumnType("bigint");

                    b.Property<long>("ProduitId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<decimal?>("AFixer")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("Quantité")
                        .HasColumnType("decimal(8,3)");

                    b.Property<int>("TypeCommande")
                        .HasColumnType("int")
                        .HasMaxLength(1);

                    b.HasKey("Id", "No", "ProduitId", "Date", "Type");

                    b.HasIndex("ProduitId");

                    b.HasIndex("Id", "No", "Type");

                    b.ToTable("Lignes");
                });

            modelBuilder.Entity("KalosfideAPI.Data.Produit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CategorieId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("Prix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(7,2)")
                        .HasDefaultValue(0m);

                    b.Property<long>("SiteId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeCommande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("TypeMesure")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("SiteId");

                    b.HasIndex("Id", "Nom")
                        .IsUnique();

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("KalosfideAPI.Data.Site", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateCatalogue")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Ouvert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Titre")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Url");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("KalosfideAPI.Data.Utilisateur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Etat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Utilisateur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveCatégorie", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Catégorie", "Catégorie")
                        .WithMany("Archives")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveClient", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Client", "Client")
                        .WithMany("Archives")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveFournisseur", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Fournisseur", "Fournisseur")
                        .WithMany("Archives")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveProduit", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Produit", "Produit")
                        .WithMany("Archives")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveSite", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Site", "Site")
                        .WithMany("Archives")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.ArchiveUtilisateur", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Utilisateur", "Utilisateur")
                        .WithMany("Archives")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.Catégorie", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Site", "Site")
                        .WithMany("Catégories")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.Client", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Site", "Site")
                        .WithMany("Clients")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KalosfideAPI.Data.Utilisateur", "Utilisateur")
                        .WithMany("Clients")
                        .HasForeignKey("UtilisateurId");
                });

            modelBuilder.Entity("KalosfideAPI.Data.DemandeSite", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Fournisseur", "Fournisseur")
                        .WithOne()
                        .HasForeignKey("KalosfideAPI.Data.DemandeSite", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.DocCLF", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Client", "Client")
                        .WithMany("Docs")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.Fournisseur", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Utilisateur", "Utilisateur")
                        .WithMany("Fournisseurs")
                        .HasForeignKey("UtilisateurId");
                });

            modelBuilder.Entity("KalosfideAPI.Data.Invitation", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Client", "Client")
                        .WithOne()
                        .HasForeignKey("KalosfideAPI.Data.Invitation", "ClientId");

                    b.HasOne("KalosfideAPI.Data.Fournisseur", "Fournisseur")
                        .WithMany("Invitations")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.LigneCLF", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Produit", "Produit")
                        .WithMany("Lignes")
                        .HasForeignKey("ProduitId")
                        .IsRequired();

                    b.HasOne("KalosfideAPI.Data.DocCLF", "Doc")
                        .WithMany("Lignes")
                        .HasForeignKey("Id", "No", "Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.Produit", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Catégorie", "Catégorie")
                        .WithMany("Produits")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KalosfideAPI.Data.Site", "Site")
                        .WithMany("Produits")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("KalosfideAPI.Data.Site", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Fournisseur", "Fournisseur")
                        .WithOne("Site")
                        .HasForeignKey("KalosfideAPI.Data.Site", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KalosfideAPI.Data.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KalosfideAPI.Data.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
